PROJECT_URL: 'http://localhost:5000'
SECRET_KEY: 'random-key'

SQLALCHEMY_DATABASE_URI: 'postgresql://ocpdb:development@postgre/ocpdb'
CELERY_BROKER_URL: 'amqp://rabbitmq'

ADMINS: ['your-admin-email@binary-butterfly.de']
MAILS_FROM: 'your-app@binary-butterfly.de'
MAIL_USERNAME: 'your-login@binary-butterfly.de'
MAIL_PASSWORD: 'your-password'

SOURCES:
  bnetza_api:
  chargecloud_pforzheim:
  chargecloud_stuttgart:


AUTO_FETCH_SOURCES:
  - bnetza_api
  - chargecloud_pforzheim
  - chargecloud_stuttgart


SERVER_AUTH_USERS:
  # Test user for local development
  dev:
    hash: 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08  # test
    roles:
      - bnetza

# This is a template. You can rename it to the config value LOGGING and adapt it to your needs.
LOGGING_TEMPLATE:
  version: 1
  formatters:
    open_telemetry:
      (): webapp.common.logging.formatter.flask_open_telemetry_formatter.FlaskOpenTelemetryFormatter
      prefix: ocpdb
      service_name: OCPDB
    human_readable:
      format: '%(asctime)s %(levelname)s: %(message)s'
  handlers:
    console_stdout:
      class: logging.StreamHandler
      level: INFO
      formatter: open_telemetry
      stream: ext://sys.stdout
    console_stderr:
      class: logging.StreamHandler
      level: ERROR
      formatter: open_telemetry
      stream: ext://sys.stderr
    split_log_file:
      class: webapp.common.logging.split_log_file_handler.SplitLogFileHandler
      level: INFO
      log_path: /app/logs
      formatter: human_readable
    open_telemetry_queue:
      class: logging.handlers.QueueHandler
      listener: webapp.common.logging.autostart_queue_listener.AutostartQueueListener
      queue: queue.Queue
      handlers:
        - open_telemetry_push
      level: INFO
      formatter: open_telemetry
    open_telemetry_push:
      class: webapp.common.logging.http_json_post_handler.HttpPostJsonHandler
      url: http://mocked-loki:5000/otel
      level: INFO
  loggers:
    webapp:
      level: INFO
      handlers:
        - split_log_file
