# Docker Compose project for local development
name: ocpdb

# binary butterfly GmbH projects add a project specific modifier to standard ports to prevent port collisions.
# This project has the modified +10.

# Define placeholder for running a container with the same UID/GID as your local user
x-local-user: &local-user ${DOCKER_LOCAL_USER:?Variable needs to be set in .env (e.g. "DOCKER_LOCAL_USER=1000:1000")}



# Define common defaults to reuse them in the service definitions (YAML anchors)
x-flask-defaults: &flask-defaults
  image: ocpdb-flask:local-dev
  build:
    context: .
    dockerfile: Dockerfile.dev
  volumes:
    - .:/app
  environment:
    # Set this variable in .env to start the app with a different config file (default: config.yaml)
    CONFIG_FILE:
    # TODO: This should be removed at some point and the app should be made SQLAlchemy 2.0 compatible!
    SQLALCHEMY_SILENCE_UBER_WARNING: 1
    OCPDB_POSTGRES_DB: ocpdb
    OCPDB_POSTGRES_USER: ocpdb
    OCPDB_POSTGRES_PASSWORD: admin
    OCPDB_POSTGRES_DOCKER_COMPOSE_SERVICE: postgre
  # The containers should run with the same UID/GID as your local user, so that files created by the containers are
  # owned by and accessible to the local user.
  user: *local-user
  depends_on:
    mysql:
      condition: service_healthy
    rabbitmq:
      condition: service_healthy

# Define reusable defaults for mocked services
x-mocked-service-defaults: &mocked-service-defaults
  image: ocpdb-flask:local-dev
  command: ["python", "/app/app.py"]
  user: *local-user

services:
  flask:
    <<: *flask-defaults
    command: ["python3", "run_flask_dev.py"]
    ports:
      - '5010:5000'

  worker:
    <<: *flask-defaults
    command: ["python3", "run_celery_dev.py"]

  worker-heartbeat:
    <<: *flask-defaults
    command: ["python3", "run_celery_heartbeat_dev.py"]

  mysql:
    image: mariadb
    volumes:
      - .:/app
      - mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ocpdb
    healthcheck:
      test: mariadb -h mysql -P 3306 -u root -p$$MYSQL_ROOT_PASSWORD -e "SELECT 1"
      interval: 1s
      timeout: 1s
      retries: 20

  postgre:
    image: postgis/postgis
    volumes:
      - postgres:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=ocpdb
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=ocpdb
      - PGUSER=ocpdb
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ocpdb -d ocpdb'" ]
      interval: 10s
      timeout: 3s
      retries: 3

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - '8091:80'
    environment:
      PMA_USER: root
      PMA_PASSWORD: root
      PMA_HOST: mysql
      UPLOAD_LIMIT: 512M
      # Disable spammy logging
      APACHE_LOG_DIR: /tmp/logs

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - '8092:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@binary-butterfly.de
      PGADMIN_DISABLE_POSTFIX: 1
      PGADMIN_DEFAULT_PASSWORD: admin

  rabbitmq:
    image: rabbitmq:latest
    user: rabbitmq
    environment:
      # Disable spammy logging
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: '-rabbit log [{console,[{level,warning}]}]'
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 1s
      timeout: 1s
      retries: 20

  redis:
    image: redis:7.2
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 1s
      retries: 20


  mocked-ochp:
    <<: *mocked-service-defaults
    volumes:
      - ./dev/test_services/mocked_ochp:/app

  mocked-chargeit:
    <<: *mocked-service-defaults
    volumes:
      - ./dev/test_services/mocked_chargeit:/app

  mocked-stadtnavi:
    <<: *mocked-service-defaults
    volumes:
      - ./dev/test_services/mocked_stadtnavi:/app

  mocked-sw-stuttgart:
    <<: *mocked-service-defaults
    volumes:
      - ./dev/test_services/mocked_sw_stuttgart:/app

  mocked-giroe:
    <<: *mocked-service-defaults
    volumes:
      - ./dev/test_services/mocked_giroe:/app

volumes:
  mysql:
  postgres:
